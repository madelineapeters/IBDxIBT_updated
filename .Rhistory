names(Ne.full)[5] = 'Isolation'
Ne.full$run = r
if (r == 1){Ne.joint = Ne.full} else {Ne.joint = bind_rows(Ne.joint,Ne.full)}
}
r
g
df = read.csv(paste(getwd(),'/IBDxIBT','/para_set_',p,'/model_run_',r,'/paraset_',p,'_offspring_map_',gen,'.csv',sep=""))
#Mothers
Mother.df = bind_cols(as.data.frame(1:nrow(df)),as.data.frame(rep(0,nrow(df))))
names(Mother.df) = c('Mother','Offspring')
Mother.count = count(df,vars='Mother')
names(Mother.count) = c('Mother','Offspring')
anti.Mother = anti_join(Mother.df,Mother.count,by='Mother')
Mother.count = bind_rows(Mother.count,anti.Mother)
names(Mother.count) = c('Parent','Offspring1')
#Fathers
Father.df = bind_cols(as.data.frame(1:nrow(df)),as.data.frame(rep(0,nrow(df))))
names(Father.df) = c('Father','Offspring')
Father.count = count(df,vars='Father')
names(Father.count) = c('Father','Offspring')
Father.count$Father = as.numeric(Father.count$Father)
anti.Father = anti_join(Father.df,Father.count,by='Father')
Father.count = bind_rows(Father.count,anti.Father)
names(Father.count) = c('Parent','Offspring2')
#Parents
Parent.count = left_join(Mother.count,Father.count,by='Parent') %>% mutate(.,Offspring = Offspring1+Offspring2)
Parent.count = Parent.count %>% select(.,Parent,Offspring)
Parent.count$Gen = gen
Parent.count$paraset = p
Parent.count$Run = r
mean = mean(Parent.count$Offspring)
var = var(Parent.count$Offspring)
Ne.df$mean[g] = mean
Ne.df
for (r in r.list){
for (p in 9:16){
if (r<8|r==10){
g.list = c(1,seq(10,100,10),seq(150,500,50))
} else {
g.list = c(1,seq(10,100,10),seq(150,800,50))
}
Ne.df = as.data.frame(matrix(nrow=length(g.list),ncol=3))
names(Ne.df) = c('mean','var','Ne')
for (g in 1:length(g.list)){
gen = g.list[g]
df = read.csv(paste(getwd(),'/IBDxIBT','/para_set_',p,'/model_run_',r,'/paraset_',p,'_offspring_map_',gen,'.csv',sep=""))
#Mothers
Mother.df = bind_cols(as.data.frame(1:nrow(df)),as.data.frame(rep(0,nrow(df))))
names(Mother.df) = c('Mother','Offspring')
Mother.count = count(df,vars='Mother')
names(Mother.count) = c('Mother','Offspring')
anti.Mother = anti_join(Mother.df,Mother.count,by='Mother')
Mother.count = bind_rows(Mother.count,anti.Mother)
names(Mother.count) = c('Parent','Offspring1')
#Fathers
Father.df = bind_cols(as.data.frame(1:nrow(df)),as.data.frame(rep(0,nrow(df))))
names(Father.df) = c('Father','Offspring')
Father.count = count(df,vars='Father')
names(Father.count) = c('Father','Offspring')
Father.count$Father = as.numeric(Father.count$Father)
anti.Father = anti_join(Father.df,Father.count,by='Father')
Father.count = bind_rows(Father.count,anti.Father)
names(Father.count) = c('Parent','Offspring2')
#Parents
Parent.count = left_join(Mother.count,Father.count,by='Parent') %>% mutate(.,Offspring = Offspring1+Offspring2)
Parent.count = Parent.count %>% select(.,Parent,Offspring)
Parent.count$Gen = gen
Parent.count$paraset = p
Parent.count$Run = r
mean = mean(Parent.count$Offspring)
var = var(Parent.count$Offspring)
Ne.df$mean[g] = mean
Ne.df$var[g] = var
Ne.df$Ne[g] = 4*nrow(df)/(mean+var)
Ne.df$Gen[g] = gen
if ((p == 9)&(g==1)&(r==1)){Parent.joint = Parent.count} else {Parent.joint = bind_rows(Parent.joint,Parent.count)}
}
Ne.df$paraset = p
if (p == 9){Ne.full = Ne.df} else {Ne.full = bind_rows(Ne.full,Ne.df)}
}
Ne.full$grouping[1:(nrow(Ne.full)/2)] = 'Selfing'
Ne.full$grouping[(1+nrow(Ne.full)/2):nrow(Ne.full)] = 'No selfing'
Ne.full$paraset[(Ne.full$paraset == 9)|(Ne.full$paraset == 13)] = 'Random'
Ne.full$paraset[(Ne.full$paraset == 10)|(Ne.full$paraset == 14)] = 'IBT'
Ne.full$paraset[(Ne.full$paraset == 11)|(Ne.full$paraset == 15)] = 'IBD'
Ne.full$paraset[(Ne.full$paraset == 12)|(Ne.full$paraset == 16)] = 'IBDxIBT'
names(Ne.full)[5] = 'Isolation'
Ne.full$run = r
if (r == 1){Ne.joint = Ne.full} else {Ne.joint = bind_rows(Ne.joint,Ne.full)}
}
detach(package:plyr)
detach(package:dplyr)
library(dplyr)
Parent.joint$grouping[1:(nrow(Parent.joint)/2)] = 'Selfing'
Parent.joint$grouping[(1+nrow(Parent.joint)/2):nrow(Parent.joint)] = 'No selfing'
Parent.joint$paraset[(Parent.joint$paraset == 9)|(Parent.joint$paraset == 13)] = 'Random'
Parent.joint$paraset[(Parent.joint$paraset == 10)|(Parent.joint$paraset == 14)] = 'IBT'
Parent.joint$paraset[(Parent.joint$paraset == 11)|(Parent.joint$paraset == 15)] = 'IBD'
Parent.joint$paraset[(Parent.joint$paraset == 12)|(Parent.joint$paraset == 16)] = 'IBDxIBT'
names(Parent.joint)[4] = 'Isolation'
Ne.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(Ne))
Var.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(var))
ggplot()+geom_line(data=filter(Ne.joint,run==1),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==2),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==3),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==4),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==5),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==6),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==8),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=Ne.avg,aes(x=Gen,y=avg,col=Isolation),size=1)+
theme_classic()+ylab("Effective population size")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2500,linetype='dashed')
?sd
Ne.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(Ne)) %>% summarize(.,SD = sd(Ne))
Ne.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(Ne))
Ne.sd = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,SD = sd(Ne))
Ne.avg
Ne.plot = bind_cols(Ne.avg,Ne.sd$SD)
Ne.plot = bind_cols(Ne.avg,as.data.frame(Ne.sd$SD))
Ne.plot
names(Ne.plot)[4] = 'SD'
ggplot(data=Ne.plot,aes(x=Gen,col=Isolation))+
geom_line(aes(y=avg),size=1)+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD),alpha=0.3)+
theme_classic()+ylab("Effective population size")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2500,linetype='dashed')
Ne.plot = Ne.plot %>% mutate(.,upperSD = avg+SD) %>% mutate(.,lowerSD = avg-SD)
Ne.plot
Ne.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(Ne))
Ne.sd = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,SD = sd(Ne))
Ne.plot = bind_cols(Ne.avg,as.data.frame(Ne.sd$SD))
names(Ne.plot)[5] = 'SD'
Ne.plot
ggplot(data=Ne.plot,aes(x=Gen,col=Isolation))+
geom_line(aes(y=avg),size=1)+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD),alpha=0.3)+
theme_classic()+ylab("Effective population size")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2500,linetype='dashed')
ggplot(data=Ne.plot,aes(x=Gen))+
geom_line(aes(y=avg,col=Isolation),size=1)+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD,fill=Isolation),alpha=0.3)+
theme_classic()+ylab("Effective population size")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2500,linetype='dashed')
View(Ne.plot)
Var.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(var))
Var.sd = Var.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,SD = sd(var))
Var.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(var))
Var.sd = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,SD = sd(var))
Var.plot = bind_cols(Var.avg,as.data.frame(Var.sd$SD))
names(Var.plot)[5] = 'SD'
ggplot(data=Var.plot,aes(x=Gen))+
geom_line(aes(y=avg,col=Isolation),size=1)+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD,fill=Isolation),alpha=0.3)+
theme_classic()+ylab("Variation in offspringer per parent")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2500,linetype='dashed')
ggplot(data=Var.plot,aes(x=Gen))+
geom_line(aes(y=avg,col=Isolation),size=1)+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD,fill=Isolation),alpha=0.3)+
theme_classic()+ylab("Variation in offspringer per parent")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2,linetype='dashed')
Parent.filtered = filter(Parent.joint,Gen %in% c(1,50,150,500))#,grouping=="Selfing")
ggplot(data=filter(Parent.joint,Gen %in% c(1,50,150,500),grouping=="Selfing"),aes(Offspring,fill=Isolation))+geom_histogram(binwidth=0.5)+facet_grid(Gen~Isolation,labeller=labeller(Gen=c(`1`='Gen 1',`50`='Gen 50',`150`='Gen 150',`500`='Gen 500')))+theme_classic()+xlab("Number gametes to next generation per parent")+ylab('Count')
r.list = c(1:6,8:10) #model run
##############################################################
## Calculate spatial autocorrelation statistics
##############################################################
for (r in r.list){
for (s in 9:16){
if (r<8|r==10){
g.list = c(1,seq(10,100,10),seq(150,500,50))
} else {
g.list = c(1,seq(10,100,10),seq(150,800,50))
}
Mantel.obs = as.data.frame(matrix(nrow=length(g.list),ncol=8))
names(Mantel.obs) = sapply(1:8, function(X) paste('paraset',X,sep="_"))
for (g in 1:length(g.list)){
gen = g.list[g]
df = read.csv(paste(getwd(),'/IBDxIBT','/para_set_',s,'/model_run_',r,'/paraset_',s,'_offspring_map_',gen,'.csv',sep=""))
neutral.df = df %>% select(.,FLday,X_pos,Y_pos,mapA,mapB,mapC,neut1a:neut24b)
neutral.df[] = lapply(neutral.df, as.character)
neutral.df[neutral.df == 'D'] = 1;
neutral.df[neutral.df[,] == 'd'] = 0
neutral.df[] = lapply(neutral.df, as.numeric)
neutral.df = neutral.df %>%
mutate(.,map1 = neut1a+neut1b) %>%
mutate(.,map2 = neut2a+neut2b) %>%
mutate(.,map3 = neut3a+neut3b) %>%
mutate(.,map4 = neut4a+neut4b) %>%
mutate(.,map5 = neut5a+neut5b) %>%
mutate(.,map6 = neut6a+neut6b) %>%
mutate(.,map7 = neut7a+neut7b) %>%
mutate(.,map8 = neut8a+neut8b) %>%
mutate(.,map9 = neut9a+neut9b) %>%
mutate(.,map10 = neut10a+neut10b) %>%
mutate(.,map11 = neut11a+neut11b) %>%
mutate(.,map12 = neut12a+neut12b) %>%
mutate(.,map13 = neut13a+neut13b) %>%
mutate(.,map14 = neut14a+neut14b) %>%
mutate(.,map15 = neut15a+neut15b) %>%
mutate(.,map16 = neut16a+neut16b) %>%
mutate(.,map17 = neut17a+neut17b) %>%
mutate(.,map18 = neut18a+neut18b) %>%
mutate(.,map19 = neut19a+neut19b) %>%
mutate(.,map20 = neut20a+neut20b) %>%
mutate(.,map21 = neut21a+neut21b) %>%
mutate(.,map22 = neut22a+neut22b) %>%
mutate(.,map23 = neut23a+neut23b) %>%
mutate(.,map24 = neut24a+neut24b)
ind.neutral.df = neutral.df %>% select(.,FLday,X_pos,Y_pos,mapA:mapC,map1:map24)
neutral.df = neutral.df %>% select(.,mapA:mapC,map1:map24)
neutral.freq = colSums(neutral.df)/(2*nrow(neutral.df))
if (g == 1){
map.df = as.data.frame(neutral.freq) %>% rownames_to_column()
map.df$Generation = gen
names(map.df) = c('Locus','Frequency','Generation')
} else {
temp.df = as.data.frame(neutral.freq) %>% rownames_to_column()
temp.df$Generation = gen
names(temp.df) = c('Locus','Frequency','Generation')
map.df = bind_rows(map.df,temp.df)
}
}
if (s == 9){
var.final = map.df
var.final$paraset = s
} else {
var.temp = map.df
var.temp$paraset = s
var.final = bind_rows(var.final,var.temp)
}
}
var.final$grouping[1:(nrow(var.final)/2)] = 'Selfing'
var.final$grouping[(1+nrow(var.final)/2):nrow(var.final)] = 'No selfing'
var.final$paraset[(var.final$paraset == 9)|(var.final$paraset == 13)] = 'Null'
var.final$paraset[(var.final$paraset == 10)|(var.final$paraset == 14)] = 'IBT'
var.final$paraset[(var.final$paraset == 11)|(var.final$paraset == 15)] = 'IBD'
var.final$paraset[(var.final$paraset == 12)|(var.final$paraset == 16)] = 'IBDxIBT'
names(var.final)[4] = 'Isolation'
summary.df = var.final %>% group_by(.,Generation,grouping,Isolation) %>% summarise(var=var(Frequency))
summary.df$Run = r
if (r == 1){joint.summary = summary.df} else {joint.summary = bind_rows(joint.summary,summary.df)}
}
Var.avg = joint.summary %>% group_by(grouping,Isolation,Generation) %>% summarise(.,avg=mean(var))
Var.sd = joint.summary %>% group_by(grouping,Isolation,Generation) %>% summarize(.,SD = sd(var))
Var.plot = bind_cols(Var.avg,as.data.frame(Var.sd$SD))
names(Var.plot)[5] = 'SD'
ggplot(data=Var.plot,aes(x=Generation))+
geom_line(aes(y=avg,col=Isolation),size=1)+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD,fill=Isolation),alpha=0.3)+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
ggplot(data=Var.plot,aes(x=Generation))+
geom_line(aes(y=avg,col=Isolation),size=1)+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD,fill=Isolation),alpha=0.1)+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
ggplot(data=Var.plot,aes(x=Generation))+
geom_line(aes(y=avg,col=Isolation),size=1)+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD,fill=Isolation),alpha=0.2)+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
ggplot(data=Var.plot,aes(x=Generation))+
geom_ribbon(aes(ymin=avg-SD,ymax=avg+SD,fill=Isolation),alpha=0.2)+
geom_line(aes(y=avg,col=Isolation),size=1)+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
library("tidyr")
library("dplyr")
library("poppr")
library("pegas")
library("ape")
library("adegenet")
library("ade4")
run = 9 #model run
g.list = c(1,10,20,30,40,50,60,70,80,90,100,150,200,250,300,350,400,450,500)
g.list = c(1,seq(10,100,10),seq(150,800,50))
Mantel.obs = as.data.frame(matrix(nrow=length(g.list),ncol=8))
names(Mantel.obs) = sapply(9:16, function(X) paste('paraset',X,sep="_"))
Mantel.p = as.data.frame(matrix(nrow=length(g.list),ncol=8))
names(Mantel.p) = sapply(9:16, function(X) paste('paraset',X,sep="_"))
##############################################################
## Calculate spatial autocorrelation statistics
##############################################################
for (s in 9:16){
for (g in 1:length(g.list)){
gen = g.list[g]
print(paste('Working on generation',gen,'of parameter set',s,sep=" "))
##############################################################
## Convert the data
##############################################################
Mydata = read.csv(paste(getwd(),'/para_set_',s,'/model_run_',run,'/paraset_',s,'_offspring_map_',gen,'.csv',sep=""))
locus = Mydata %>% select(.,genotypeA,genotypeB,genotypeC)
locus$genotype1 = paste(Mydata$neut1a,Mydata$neut1b,sep="")
locus$genotype2 = paste(Mydata$neut2a,Mydata$neut2b,sep="")
locus$genotype3 = paste(Mydata$neut3a,Mydata$neut3b,sep="")
locus$genotype4 = paste(Mydata$neut4a,Mydata$neut4b,sep="")
locus$genotype5 = paste(Mydata$neut5a,Mydata$neut5b,sep="")
locus$genotype6 = paste(Mydata$neut6a,Mydata$neut6b,sep="")
locus$genotype7 = paste(Mydata$neut7a,Mydata$neut7b,sep="")
locus$genotype8 = paste(Mydata$neut8a,Mydata$neut8b,sep="")
locus$genotype9 = paste(Mydata$neut9a,Mydata$neut9b,sep="")
locus$genotype10 = paste(Mydata$neut10a,Mydata$neut10b,sep="")
locus$genotype11 = paste(Mydata$neut11a,Mydata$neut11b,sep="")
locus$genotype12 = paste(Mydata$neut12a,Mydata$neut12b,sep="")
locus$genotype13 = paste(Mydata$neut13a,Mydata$neut13b,sep="")
locus$genotype14 = paste(Mydata$neut14a,Mydata$neut14b,sep="")
locus$genotype15 = paste(Mydata$neut15a,Mydata$neut15b,sep="")
locus$genotype16 = paste(Mydata$neut16a,Mydata$neut16b,sep="")
locus$genotype17 = paste(Mydata$neut17a,Mydata$neut17b,sep="")
locus$genotype18 = paste(Mydata$neut18a,Mydata$neut18b,sep="")
locus$genotype19 = paste(Mydata$neut19a,Mydata$neut19b,sep="")
locus$genotype20 = paste(Mydata$neut20a,Mydata$neut20b,sep="")
locus$genotype21 = paste(Mydata$neut21a,Mydata$neut21b,sep="")
locus$genotype22 = paste(Mydata$neut22a,Mydata$neut22b,sep="")
locus$genotype23 = paste(Mydata$neut23a,Mydata$neut23b,sep="")
locus$genotype24 = paste(Mydata$neut24a,Mydata$neut24b,sep="")
#Convert matrix to a  genind object (for the package adegenet). #The genind object can then easily be converted into loci objects (package pegas) (i.e. Mydata2)
Mydata1 = df2genind(locus, ploidy = 2, sep="")
Mydata2 = genind2loci(Mydata1)
##############################################################
## Individual genetic distance: euclidean distance
##############################################################
#Use the function dist() from adegenet
#Use euclidean distance among vector of allele frequencies
#distgenEUCL = dist(Mydata1, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
#hist(distgenEUCL)
##############################################################
## Individual genetic distance: num. loci at which ind. differ
##############################################################
#distgenDIFF = dist.gene(Mydata2, method="pairwise", pairwise.deletion = TRUE, variance = FALSE)
#hist(distgenDIFF)
##############################################################
## Number allelic differences between two individuals
##############################################################
distgenDISS = diss.dist(Mydata1, percent = FALSE, mat = FALSE)
#hist(distgenDISS)
##############################################################
## Comparison of different distance measures
##############################################################
#boxplot(distgenEUCL, distgenDIFF, distgenDISS)
##############################################################
## Matrix of spatial distances
##############################################################
dist.mat = matrix(nrow=sqrt(nrow(Mydata)), ncol=sqrt(nrow(Mydata)))
X_pos = Mydata$X_pos
Y_pos = Mydata$Y_pos
for (m in 1:sqrt(nrow(Mydata))) {
for (p in 1:sqrt(nrow(Mydata))) {
dist.mat[m,p]<-sqrt((X_pos[m]-X_pos[p])^2 + (Y_pos[m] - Y_pos[p])^2)
} #distance is just the Euclidean distance between two points
}
dist.mat = dist(cbind(Mydata$X_pos,Mydata$Y_pos))
mantel.out = mantel.rtest(distgenDISS, dist.mat, nrepet = 500)
Mantel.obs[g,s] = mantel.out$obs
Mantel.p[g,s] = mantel.out$pvalue
write.csv(Mantel.obs,'Neutral.2D.Mantel.obs.r.csv',row.names=FALSE)
write.csv(Mantel.p,'Neutral.2D.Mantel.p.csv',row.names=FALSE)
}
}
g.short = c(1,seq(100,800,100))
Mantel.obs = as.data.frame(matrix(nrow=length(g.short),ncol=8))
names(Mantel.obs) = sapply(9:16, function(X) paste('paraset',X,sep="_"))
Mantel.p = as.data.frame(matrix(nrow=length(g.short),ncol=8))
names(Mantel.p) = sapply(9:16, function(X) paste('paraset',X,sep="_"))
##############################################################
## Calculate spatial autocorrelation statistics
##############################################################
for (s in 9:16){
for (g in 1:length(g.short)){
gen = g.short[g]
print(paste('Working on generation',gen,'of parameter set',s,sep=" "))
##############################################################
## Convert the data
##############################################################
Mydata = read.csv(paste(getwd(),'/para_set_',s,'/model_run_',run,'/paraset_',s,'_offspring_map_',gen,'.csv',sep=""))
locus = Mydata %>% select(.,genotypeA,genotypeB,genotypeC)
locus$genotype1 = paste(Mydata$neut1a,Mydata$neut1b,sep="")
locus$genotype2 = paste(Mydata$neut2a,Mydata$neut2b,sep="")
locus$genotype3 = paste(Mydata$neut3a,Mydata$neut3b,sep="")
locus$genotype4 = paste(Mydata$neut4a,Mydata$neut4b,sep="")
locus$genotype5 = paste(Mydata$neut5a,Mydata$neut5b,sep="")
locus$genotype6 = paste(Mydata$neut6a,Mydata$neut6b,sep="")
locus$genotype7 = paste(Mydata$neut7a,Mydata$neut7b,sep="")
locus$genotype8 = paste(Mydata$neut8a,Mydata$neut8b,sep="")
locus$genotype9 = paste(Mydata$neut9a,Mydata$neut9b,sep="")
locus$genotype10 = paste(Mydata$neut10a,Mydata$neut10b,sep="")
locus$genotype11 = paste(Mydata$neut11a,Mydata$neut11b,sep="")
locus$genotype12 = paste(Mydata$neut12a,Mydata$neut12b,sep="")
locus$genotype13 = paste(Mydata$neut13a,Mydata$neut13b,sep="")
locus$genotype14 = paste(Mydata$neut14a,Mydata$neut14b,sep="")
locus$genotype15 = paste(Mydata$neut15a,Mydata$neut15b,sep="")
locus$genotype16 = paste(Mydata$neut16a,Mydata$neut16b,sep="")
locus$genotype17 = paste(Mydata$neut17a,Mydata$neut17b,sep="")
locus$genotype18 = paste(Mydata$neut18a,Mydata$neut18b,sep="")
locus$genotype19 = paste(Mydata$neut19a,Mydata$neut19b,sep="")
locus$genotype20 = paste(Mydata$neut20a,Mydata$neut20b,sep="")
locus$genotype21 = paste(Mydata$neut21a,Mydata$neut21b,sep="")
locus$genotype22 = paste(Mydata$neut22a,Mydata$neut22b,sep="")
locus$genotype23 = paste(Mydata$neut23a,Mydata$neut23b,sep="")
locus$genotype24 = paste(Mydata$neut24a,Mydata$neut24b,sep="")
#Convert matrix to a  genind object (for the package adegenet). #The genind object can then easily be converted into loci objects (package pegas) (i.e. Mydata2)
Mydata1 = df2genind(locus, ploidy = 2, sep="")
Mydata2 = genind2loci(Mydata1)
##############################################################
## Individual genetic distance: euclidean distance
##############################################################
#Use the function dist() from adegenet
#Use euclidean distance among vector of allele frequencies
#distgenEUCL = dist(Mydata1, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
#hist(distgenEUCL)
##############################################################
## Individual genetic distance: num. loci at which ind. differ
##############################################################
#distgenDIFF = dist.gene(Mydata2, method="pairwise", pairwise.deletion = TRUE, variance = FALSE)
#hist(distgenDIFF)
##############################################################
## Number allelic differences between two individuals
##############################################################
distgenDISS = diss.dist(Mydata1, percent = FALSE, mat = FALSE)
#hist(distgenDISS)
##############################################################
## Comparison of different distance measures
##############################################################
#boxplot(distgenEUCL, distgenDIFF, distgenDISS)
##############################################################
## Matrix of spatial distances
##############################################################
dist.mat = matrix(nrow=sqrt(nrow(Mydata)), ncol=sqrt(nrow(Mydata)))
X_pos = Mydata$X_pos
Y_pos = Mydata$Y_pos
for (m in 1:sqrt(nrow(Mydata))) {
for (p in 1:sqrt(nrow(Mydata))) {
dist.mat[m,p]<-sqrt((X_pos[m]-X_pos[p])^2 + (Y_pos[m] - Y_pos[p])^2)
} #distance is just the Euclidean distance between two points
}
dist.mat = dist(cbind(Mydata$X_pos,Mydata$Y_pos))
mantel.out = mantel.rtest(distgenDISS, dist.mat, nrepet = 500)
Mantel.obs[g,s] = mantel.out$obs
Mantel.p[g,s] = mantel.out$pvalue
write.csv(Mantel.obs,'Neutral.2D.Mantel.obs.r.csv',row.names=FALSE)
write.csv(Mantel.p,'Neutral.2D.Mantel.p.csv',row.names=FALSE)
}
}
##############################################################
## Calculate spatial autocorrelation statistics
##############################################################
for (s in 9:16){
for (g in 1:length(g.short)){
gen = g.short[g]
print(paste('Working on generation',gen,'of parameter set',s,sep=" "))
##############################################################
## Convert the data
##############################################################
Mydata = read.csv(paste(getwd(),'/IBDxIBT','/para_set_',s,'/model_run_',run,'/paraset_',s,'_offspring_map_',gen,'.csv',sep=""))
locus = Mydata %>% select(.,genotypeA,genotypeB,genotypeC)
locus$genotype1 = paste(Mydata$neut1a,Mydata$neut1b,sep="")
locus$genotype2 = paste(Mydata$neut2a,Mydata$neut2b,sep="")
locus$genotype3 = paste(Mydata$neut3a,Mydata$neut3b,sep="")
locus$genotype4 = paste(Mydata$neut4a,Mydata$neut4b,sep="")
locus$genotype5 = paste(Mydata$neut5a,Mydata$neut5b,sep="")
locus$genotype6 = paste(Mydata$neut6a,Mydata$neut6b,sep="")
locus$genotype7 = paste(Mydata$neut7a,Mydata$neut7b,sep="")
locus$genotype8 = paste(Mydata$neut8a,Mydata$neut8b,sep="")
locus$genotype9 = paste(Mydata$neut9a,Mydata$neut9b,sep="")
locus$genotype10 = paste(Mydata$neut10a,Mydata$neut10b,sep="")
locus$genotype11 = paste(Mydata$neut11a,Mydata$neut11b,sep="")
locus$genotype12 = paste(Mydata$neut12a,Mydata$neut12b,sep="")
locus$genotype13 = paste(Mydata$neut13a,Mydata$neut13b,sep="")
locus$genotype14 = paste(Mydata$neut14a,Mydata$neut14b,sep="")
locus$genotype15 = paste(Mydata$neut15a,Mydata$neut15b,sep="")
locus$genotype16 = paste(Mydata$neut16a,Mydata$neut16b,sep="")
locus$genotype17 = paste(Mydata$neut17a,Mydata$neut17b,sep="")
locus$genotype18 = paste(Mydata$neut18a,Mydata$neut18b,sep="")
locus$genotype19 = paste(Mydata$neut19a,Mydata$neut19b,sep="")
locus$genotype20 = paste(Mydata$neut20a,Mydata$neut20b,sep="")
locus$genotype21 = paste(Mydata$neut21a,Mydata$neut21b,sep="")
locus$genotype22 = paste(Mydata$neut22a,Mydata$neut22b,sep="")
locus$genotype23 = paste(Mydata$neut23a,Mydata$neut23b,sep="")
locus$genotype24 = paste(Mydata$neut24a,Mydata$neut24b,sep="")
#Convert matrix to a  genind object (for the package adegenet). #The genind object can then easily be converted into loci objects (package pegas) (i.e. Mydata2)
Mydata1 = df2genind(locus, ploidy = 2, sep="")
Mydata2 = genind2loci(Mydata1)
##############################################################
## Individual genetic distance: euclidean distance
##############################################################
#Use the function dist() from adegenet
#Use euclidean distance among vector of allele frequencies
#distgenEUCL = dist(Mydata1, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
#hist(distgenEUCL)
##############################################################
## Individual genetic distance: num. loci at which ind. differ
##############################################################
#distgenDIFF = dist.gene(Mydata2, method="pairwise", pairwise.deletion = TRUE, variance = FALSE)
#hist(distgenDIFF)
##############################################################
## Number allelic differences between two individuals
##############################################################
distgenDISS = diss.dist(Mydata1, percent = FALSE, mat = FALSE)
#hist(distgenDISS)
##############################################################
## Comparison of different distance measures
##############################################################
#boxplot(distgenEUCL, distgenDIFF, distgenDISS)
##############################################################
## Matrix of spatial distances
##############################################################
dist.mat = matrix(nrow=sqrt(nrow(Mydata)), ncol=sqrt(nrow(Mydata)))
X_pos = Mydata$X_pos
Y_pos = Mydata$Y_pos
for (m in 1:sqrt(nrow(Mydata))) {
for (p in 1:sqrt(nrow(Mydata))) {
dist.mat[m,p]<-sqrt((X_pos[m]-X_pos[p])^2 + (Y_pos[m] - Y_pos[p])^2)
} #distance is just the Euclidean distance between two points
}
dist.mat = dist(cbind(Mydata$X_pos,Mydata$Y_pos))
mantel.out = mantel.rtest(distgenDISS, dist.mat, nrepet = 500)
Mantel.obs[g,s] = mantel.out$obs
Mantel.p[g,s] = mantel.out$pvalue
write.csv(Mantel.obs,'Neutral.2D.Mantel.obs.r.csv',row.names=FALSE)
write.csv(Mantel.p,'Neutral.2D.Mantel.p.csv',row.names=FALSE)
}
}
