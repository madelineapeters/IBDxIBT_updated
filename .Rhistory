for (r in r.list){
for (p in 9:16){
for (g in 1:length(g.list)){
gen = g.list[g]
df = read.csv(paste(getwd(),'/para_set_',p,'/model_run_',r,'/paraset_',p,'_offspring_map_',gen,'.csv',sep=""))
#Mothers
Mother.df = bind_cols(as.data.frame(1:nrow(df)),as.data.frame(rep(0,nrow(df))))
names(Mother.df) = c('Mother','Offspring')
Mother.count = count(df,vars='Mother')
names(Mother.count) = c('Mother','Offspring')
anti.Mother = anti_join(Mother.df,Mother.count,by='Mother')
Mother.count = bind_rows(Mother.count,anti.Mother)
names(Mother.count) = c('Parent','Offspring1')
#Fathers
Father.df = bind_cols(as.data.frame(1:nrow(df)),as.data.frame(rep(0,nrow(df))))
names(Father.df) = c('Father','Offspring')
Father.count = count(df,vars='Father')
names(Father.count) = c('Father','Offspring')
Father.count$Father = as.numeric(Father.count$Father)
anti.Father = anti_join(Father.df,Father.count,by='Father')
Father.count = bind_rows(Father.count,anti.Father)
names(Father.count) = c('Parent','Offspring2')
#Parents
Parent.count = left_join(Mother.count,Father.count,by='Parent') %>% mutate(.,Offspring = Offspring1+Offspring2)
Parent.count = Parent.count %>% select(.,Parent,Offspring)
Parent.count$Gen = gen
Parent.count$paraset = p
Parent.count$Run = r
mean = mean(Parent.count$Offspring)
var = var(Parent.count$Offspring)
Ne.df$mean[g] = mean
Ne.df$var[g] = var
Ne.df$Ne[g] = 4*nrow(df)/(mean+var)
Ne.df$Gen[g] = gen
if ((p == 9)&(g==1)&(r==1)){Parent.joint = Parent.count} else {Parent.joint = bind_rows(Parent.joint,Parent.count)}
}
Ne.df$paraset = p
if (p == 9){Ne.full = Ne.df} else {Ne.full = bind_rows(Ne.full,Ne.df)}
}
Ne.full$grouping[1:(nrow(Ne.full)/2)] = 'Selfing'
Ne.full$grouping[(1+nrow(Ne.full)/2):nrow(Ne.full)] = 'No selfing'
Ne.full$paraset[(Ne.full$paraset == 9)|(Ne.full$paraset == 13)] = 'Random'
Ne.full$paraset[(Ne.full$paraset == 10)|(Ne.full$paraset == 14)] = 'IBT'
Ne.full$paraset[(Ne.full$paraset == 11)|(Ne.full$paraset == 15)] = 'IBD'
Ne.full$paraset[(Ne.full$paraset == 12)|(Ne.full$paraset == 16)] = 'IBDxIBT'
names(Ne.full)[5] = 'Isolation'
Ne.full$run = r
if (r == 1){Ne.joint = Ne.full} else {Ne.joint = bind_rows(Ne.joint,Ne.full)}
}
detach(package:plyr)
detach(package:dplyr)
library(dplyr)
Parent.joint$grouping[1:(nrow(Parent.joint)/2)] = 'Selfing'
Parent.joint$grouping[(1+nrow(Parent.joint)/2):nrow(Parent.joint)] = 'No selfing'
Parent.joint$paraset[(Parent.joint$paraset == 9)|(Parent.joint$paraset == 13)] = 'Random'
Parent.joint$paraset[(Parent.joint$paraset == 10)|(Parent.joint$paraset == 14)] = 'IBT'
Parent.joint$paraset[(Parent.joint$paraset == 11)|(Parent.joint$paraset == 15)] = 'IBD'
Parent.joint$paraset[(Parent.joint$paraset == 12)|(Parent.joint$paraset == 16)] = 'IBDxIBT'
names(Parent.joint)[4] = 'Isolation'
Ne.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(Ne))
Var.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(var))
ggplot()+geom_line(data=filter(Ne.joint,run==1),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==2),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==3),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=Ne.avg,aes(x=Gen,y=avg,col=Isolation),size=1)+
theme_classic()+ylab("Effective population size")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2500,linetype='dashed')
ggplot()+geom_line(data=filter(Ne.joint,run==1),aes(x=Gen,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==2),aes(x=Gen,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==3),aes(x=Gen,y=var,col=Isolation),alpha=0.25)+
geom_line(data=Var.avg,aes(x=Gen,y=avg,col=Isolation),size=1)+
theme_classic()+ylab("Variation in offspring per parent")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2,linetype='dashed')
Parent.filtered = filter(Parent.joint,Gen %in% c(1,50,150,500))#,grouping=="Selfing")
ggplot(data=filter(Parent.joint,Gen %in% c(1,50,150,500),grouping=="Selfing"),aes(Offspring,fill=Isolation))+geom_histogram(binwidth=0.5)+facet_grid(Gen~Isolation)+theme_classic()+xlab("Number gametes to next generation per parent")+ylab('Count')
ggplot(data=filter(Parent.joint,Gen %in% c(1,50,150,500),grouping=="Selfing"),aes(Offspring,fill=Isolation))+geom_histogram(binwidth=0.5)+facet_grid(Gen~Isolation,labeller=labeller(Gen=c(`1`='Gen 1',`50`='Gen 50',`150`='Gen 150',`500`='Gen 500'))+theme_classic()+xlab("Number gametes to next generation per parent")+ylab('Count')
ggplot(data=filter(Parent.joint,Gen %in% c(1,50,150,500),grouping=="Selfing"),aes(Offspring,fill=Isolation))+geom_histogram(binwidth=0.5)+facet_grid(Gen~Isolation,labeller=labeller(Gen=c(`1`='Gen 1',`50`='Gen 50',`150`='Gen 150',`500`='Gen 500')))+theme_classic()+xlab("Number gametes to next generation per parent")+ylab('Count')
r.list = c(1,2,3) #model run
g.list = c(1,10,20,30,40,50,60,70,80,90,100,150,200,250,300,350,400,450,500)
Mantel.obs = as.data.frame(matrix(nrow=length(g.list),ncol=8))
names(Mantel.obs) = sapply(1:8, function(X) paste('paraset',X,sep="_"))
##############################################################
## Calculate spatial autocorrelation statistics
##############################################################
for (r in r.list){
for (s in 9:16){
for (g in 1:length(g.list)){
gen = g.list[g]
df = read.csv(paste(getwd(),'/para_set_',s,'/model_run_',r,'/paraset_',s,'_offspring_map_',gen,'.csv',sep=""))
neutral.df = df %>% select(.,FLday,X_pos,Y_pos,mapA,mapB,mapC,neut1a:neut24b)
neutral.df[] = lapply(neutral.df, as.character)
neutral.df[neutral.df == 'D'] = 1;
neutral.df[neutral.df[,] == 'd'] = 0
neutral.df[] = lapply(neutral.df, as.numeric)
neutral.df = neutral.df %>%
mutate(.,map1 = neut1a+neut1b) %>%
mutate(.,map2 = neut2a+neut2b) %>%
mutate(.,map3 = neut3a+neut3b) %>%
mutate(.,map4 = neut4a+neut4b) %>%
mutate(.,map5 = neut5a+neut5b) %>%
mutate(.,map6 = neut6a+neut6b) %>%
mutate(.,map7 = neut7a+neut7b) %>%
mutate(.,map8 = neut8a+neut8b) %>%
mutate(.,map9 = neut9a+neut9b) %>%
mutate(.,map10 = neut10a+neut10b) %>%
mutate(.,map11 = neut11a+neut11b) %>%
mutate(.,map12 = neut12a+neut12b) %>%
mutate(.,map13 = neut13a+neut13b) %>%
mutate(.,map14 = neut14a+neut14b) %>%
mutate(.,map15 = neut15a+neut15b) %>%
mutate(.,map16 = neut16a+neut16b) %>%
mutate(.,map17 = neut17a+neut17b) %>%
mutate(.,map18 = neut18a+neut18b) %>%
mutate(.,map19 = neut19a+neut19b) %>%
mutate(.,map20 = neut20a+neut20b) %>%
mutate(.,map21 = neut21a+neut21b) %>%
mutate(.,map22 = neut22a+neut22b) %>%
mutate(.,map23 = neut23a+neut23b) %>%
mutate(.,map24 = neut24a+neut24b)
ind.neutral.df = neutral.df %>% select(.,FLday,X_pos,Y_pos,mapA:mapC,map1:map24)
neutral.df = neutral.df %>% select(.,mapA:mapC,map1:map24)
neutral.freq = colSums(neutral.df)/(2*nrow(neutral.df))
if (g == 1){
map.df = as.data.frame(neutral.freq) %>% rownames_to_column()
map.df$Generation = gen
names(map.df) = c('Locus','Frequency','Generation')
} else {
temp.df = as.data.frame(neutral.freq) %>% rownames_to_column()
temp.df$Generation = gen
names(temp.df) = c('Locus','Frequency','Generation')
map.df = bind_rows(map.df,temp.df)
}
}
if (s == 9){
var.final = map.df
var.final$paraset = s
} else {
var.temp = map.df
var.temp$paraset = s
var.final = bind_rows(var.final,var.temp)
}
}
var.final$grouping[1:(nrow(var.final)/2)] = 'Selfing'
var.final$grouping[(1+nrow(var.final)/2):nrow(var.final)] = 'No selfing'
var.final$paraset[(var.final$paraset == 9)|(var.final$paraset == 13)] = 'Null'
var.final$paraset[(var.final$paraset == 10)|(var.final$paraset == 14)] = 'IBT'
var.final$paraset[(var.final$paraset == 11)|(var.final$paraset == 15)] = 'IBD'
var.final$paraset[(var.final$paraset == 12)|(var.final$paraset == 16)] = 'IBDxIBT'
names(var.final)[4] = 'Isolation'
summary.df = var.final %>% group_by(.,Generation,grouping,Isolation) %>% summarise(var=var(Frequency))
summary.df$Run = r
if (r == 1){joint.summary = summary.df} else {joint.summary = bind_rows(joint.summary,summary.df)}
}
Var.avg = joint.summary %>% group_by(grouping,Isolation,Generation) %>% summarise(.,avg=mean(var))
ggplot()+geom_line(data=filter(joint.summary,Run==1),aes(x=Generation,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(joint.summary,Run==2),aes(x=Generation,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(joint.summary,Run==3),aes(x=Generation,y=var,col=Isolation),alpha=0.25)+
geom_line(data=Var.avg,aes(x=Generation,y=avg,col=Isolation),size=1)+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
ggplot()+geom_line(data=filter(joint.summary,Run==2,grouping=='Selfing'),aes(x=Generation,y=var,col=Isolation))+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
ggplot()+geom_line(data=filter(joint.summary,Run==3,grouping=='Selfing'),aes(x=Generation,y=var,col=Isolation))+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
# Set parameters
para_set = 12
run = 3
g = 500
# Read in data and set up for k-means analysis
df = read.csv(paste(getwd(),'/para_set_',para_set,'/model_run_',run,'/paraset_',para_set,'_offspring_map_',g,'.csv',sep=""))
neutral.df = df %>% select(.,FLday,X_pos,Y_pos,mapA,mapB,mapC,loc1a:loc5b,neut1a:neut24b)
neutral.df[] = lapply(neutral.df, as.character)
neutral.df[neutral.df == 'D'] = 1;
neutral.df[neutral.df[,] == 'd'] = 0
neutral.df[] = lapply(neutral.df, as.numeric)
neutral.df = neutral.df %>%
mutate(.,F1 = loc1a+loc1b) %>%
mutate(.,F2 = loc2a+loc2b) %>%
mutate(.,F3 = loc3a+loc3b) %>%
mutate(.,F4 = loc4a+loc4b) %>%
mutate(.,F5 = loc5a+loc5b) %>%
mutate(.,map1 = neut1a+neut1b) %>%
mutate(.,map2 = neut2a+neut2b) %>%
mutate(.,map3 = neut3a+neut3b) %>%
mutate(.,map4 = neut4a+neut4b) %>%
mutate(.,map5 = neut5a+neut5b) %>%
mutate(.,map6 = neut6a+neut6b) %>%
mutate(.,map7 = neut7a+neut7b) %>%
mutate(.,map8 = neut8a+neut8b) %>%
mutate(.,map9 = neut9a+neut9b) %>%
mutate(.,map10 = neut10a+neut10b) %>%
mutate(.,map11 = neut11a+neut11b) %>%
mutate(.,map12 = neut12a+neut12b) %>%
mutate(.,map13 = neut13a+neut13b) %>%
mutate(.,map14 = neut14a+neut14b) %>%
mutate(.,map15 = neut15a+neut15b) %>%
mutate(.,map16 = neut16a+neut16b) %>%
mutate(.,map17 = neut17a+neut17b) %>%
mutate(.,map18 = neut18a+neut18b) %>%
mutate(.,map19 = neut19a+neut19b) %>%
mutate(.,map20 = neut20a+neut20b) %>%
mutate(.,map21 = neut21a+neut21b) %>%
mutate(.,map22 = neut22a+neut22b) %>%
mutate(.,map23 = neut23a+neut23b) %>%
mutate(.,map24 = neut24a+neut24b)
ind.neutral.df = neutral.df %>% select(.,FLday,X_pos,Y_pos,mapA:mapC,map1:map24)
neutral.df = neutral.df %>% select(.,mapA:mapC,map1:map24)
df.scaled = scale(neutral.df)
scaled.matrix = as.matrix(df.scaled)
set.seed(123)
d_clust = Mclust(scaled.matrix, G=1:4,
modelNames = mclust.options("emModelNames"))
BIC.plot = plot(d_clust, what = c("BIC"),
dimens = NULL, xlab = NULL, ylab = NULL, ylim = NULL, xlim = NULL,
addEllipses = TRUE, main = FALSE)
library(mclust)
library(rgl)
d_clust = Mclust(scaled.matrix, G=1:4,
modelNames = mclust.options("emModelNames"))
BIC.plot = plot(d_clust, what = c("BIC"),
dimens = NULL, xlab = NULL, ylab = NULL, ylim = NULL, xlim = NULL,
addEllipses = TRUE, main = FALSE)
title(main = "Spatial clustering of flowering time")
mtext(paste("BIC, generation", g, sep=" "))
############ K-means clustering ###############
k.means = d_clust$G
km.res = kmeans(df.scaled, k.means, iter.max = 20,nstart = 25)
# Visualize k-means clusters
fviz_cluster(km.res, data = df.scaled, geom = "point",
stand = FALSE, ellipse.type = "norm")+theme_classic()+theme(legend.position='none')+
ggtitle('Clustering based on neutral variation (k = 2)')+
geom_point(aes(col=factor(ind.neutral.df$FLday)))
library(dplyr)
library(tibble)
library(ggplot2)
library(RColorBrewer)
library(factoextra)
library(cluster)
library(NbClust)
library(mclust)
library(rgl)
# Visualize k-means clusters
fviz_cluster(km.res, data = df.scaled, geom = "point",
stand = FALSE, ellipse.type = "norm")+theme_classic()+theme(legend.position='none')+
ggtitle('Clustering based on neutral variation (k = 2)')+
geom_point(aes(col=factor(ind.neutral.df$FLday)))
ggplot()+geom_tile(data=df,aes(x=X_pos,y=Y_pos,fill=km.res$cluster))+theme_classic()+theme(legend.position='none')+xlab('X position')+ylab('Y position')+ggtitle(paste('Neutral genetic clusters in two-dimensional space (k = ',d_clust$G,')',sep=""))+scale_fill_gradient(low='red',high='yellow')
ggplot()+geom_tile(data=df,aes(x=X_pos,y=Y_pos,fill=FLday))+theme_classic()+theme(legend.position='none')+xlab('X position')+ylab('Y position')+ggtitle(paste('Flowering day'))
ggplot()+geom_tile(data=df,aes(x=X_pos,y=Y_pos,fill=km.res$cluster))+theme_classic()+theme(legend.position='none')+xlab('X position')+ylab('Y position')+ggtitle(paste('Neutral genetic clusters in two-dimensional space (k = ',d_clust$G,')',sep=""))+scale_fill_gradient(low='red',high='yellow')
ggplot()+geom_tile(data=df,aes(x=X_pos,y=Y_pos,fill=km.res$cluster))+theme_classic()+theme(legend.position='none')+xlab('X position')+ylab('Y position')+ggtitle(paste('Neutral genetic clusters in two-dimensional space (k = ',d_clust$G,')',sep=""))+scale_fill_gradient(low='red',high='yellow')
# Spinning 3d Scatterplot
library(rgl)
c = km.res$cluster
cols = rainbow(n=7)[c]
plot3d(ind.neutral.df$X_pos, ind.neutral.df$Y_pos, ind.neutral.df$FLday, col=cols, size=3,
xlab='',ylab='',zlab='')
k.means
names(df)
df = bind_cols(df,as.data.frame(km.res$cluster))
names(df)
ecf(filter(df,`km.res$cluster`==2))
edf(filter(df,`km.res$cluster`==2))
ecdf(filter(df,`km.res$cluster`==2))
ecdf(filter(df,`km.res$cluster`==2)$FLday)
plot(ecdf(filter(df,`km.res$cluster`==2)$FLday))
plot(ecdf(filter(df,`km.res$cluster`==1)$FLday))
library(dplyr)
library(tibble)
library(ggplot2)
library(RColorBrewer)
library(psych)
library(tidyr)
library(plyr)
para_set = 9 #parameter set
r.list = 1:4 #model run
g.list = c(1,10,20,30,40,50,60,70,80,90,100,150,200,250,300,350,400,450,500)
Ne.df = as.data.frame(matrix(nrow=length(g.list),ncol=3))
names(Ne.df) = c('mean','var','Ne')
for (r in r.list){
for (p in 9:16){
for (g in 1:length(g.list)){
gen = g.list[g]
df = read.csv(paste(getwd(),'/para_set_',p,'/model_run_',r,'/paraset_',p,'_offspring_map_',gen,'.csv',sep=""))
#Mothers
Mother.df = bind_cols(as.data.frame(1:nrow(df)),as.data.frame(rep(0,nrow(df))))
names(Mother.df) = c('Mother','Offspring')
Mother.count = count(df,vars='Mother')
names(Mother.count) = c('Mother','Offspring')
anti.Mother = anti_join(Mother.df,Mother.count,by='Mother')
Mother.count = bind_rows(Mother.count,anti.Mother)
names(Mother.count) = c('Parent','Offspring1')
#Fathers
Father.df = bind_cols(as.data.frame(1:nrow(df)),as.data.frame(rep(0,nrow(df))))
names(Father.df) = c('Father','Offspring')
Father.count = count(df,vars='Father')
names(Father.count) = c('Father','Offspring')
Father.count$Father = as.numeric(Father.count$Father)
anti.Father = anti_join(Father.df,Father.count,by='Father')
Father.count = bind_rows(Father.count,anti.Father)
names(Father.count) = c('Parent','Offspring2')
#Parents
Parent.count = left_join(Mother.count,Father.count,by='Parent') %>% mutate(.,Offspring = Offspring1+Offspring2)
Parent.count = Parent.count %>% select(.,Parent,Offspring)
Parent.count$Gen = gen
Parent.count$paraset = p
Parent.count$Run = r
mean = mean(Parent.count$Offspring)
var = var(Parent.count$Offspring)
Ne.df$mean[g] = mean
Ne.df$var[g] = var
Ne.df$Ne[g] = 4*nrow(df)/(mean+var)
Ne.df$Gen[g] = gen
if ((p == 9)&(g==1)&(r==1)){Parent.joint = Parent.count} else {Parent.joint = bind_rows(Parent.joint,Parent.count)}
}
Ne.df$paraset = p
if (p == 9){Ne.full = Ne.df} else {Ne.full = bind_rows(Ne.full,Ne.df)}
}
Ne.full$grouping[1:(nrow(Ne.full)/2)] = 'Selfing'
Ne.full$grouping[(1+nrow(Ne.full)/2):nrow(Ne.full)] = 'No selfing'
Ne.full$paraset[(Ne.full$paraset == 9)|(Ne.full$paraset == 13)] = 'Random'
Ne.full$paraset[(Ne.full$paraset == 10)|(Ne.full$paraset == 14)] = 'IBT'
Ne.full$paraset[(Ne.full$paraset == 11)|(Ne.full$paraset == 15)] = 'IBD'
Ne.full$paraset[(Ne.full$paraset == 12)|(Ne.full$paraset == 16)] = 'IBDxIBT'
names(Ne.full)[5] = 'Isolation'
Ne.full$run = r
if (r == 1){Ne.joint = Ne.full} else {Ne.joint = bind_rows(Ne.joint,Ne.full)}
}
detach(package:plyr)
detach(package:plyr)
detach(package:dplyr)
library(dplyr)
Parent.joint$grouping[1:(nrow(Parent.joint)/2)] = 'Selfing'
Parent.joint$grouping[(1+nrow(Parent.joint)/2):nrow(Parent.joint)] = 'No selfing'
Parent.joint$paraset[(Parent.joint$paraset == 9)|(Parent.joint$paraset == 13)] = 'Random'
Parent.joint$paraset[(Parent.joint$paraset == 10)|(Parent.joint$paraset == 14)] = 'IBT'
Parent.joint$paraset[(Parent.joint$paraset == 11)|(Parent.joint$paraset == 15)] = 'IBD'
Parent.joint$paraset[(Parent.joint$paraset == 12)|(Parent.joint$paraset == 16)] = 'IBDxIBT'
names(Parent.joint)[4] = 'Isolation'
Ne.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(Ne))
Var.avg = Ne.joint %>% group_by(grouping,Gen,Isolation) %>% summarize(.,avg = mean(var))
ggplot()+geom_line(data=filter(Ne.joint,run==1),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==2),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==3),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==4),aes(x=Gen,y=Ne,col=Isolation),alpha=0.25)+
geom_line(data=Ne.avg,aes(x=Gen,y=avg,col=Isolation),size=1)+
theme_classic()+ylab("Effective population size")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2500,linetype='dashed')
ggplot()+geom_line(data=filter(Ne.joint,run==1),aes(x=Gen,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==2),aes(x=Gen,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==3),aes(x=Gen,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(Ne.joint,run==4),aes(x=Gen,y=var,col=Isolation),alpha=0.25)+
geom_line(data=Var.avg,aes(x=Gen,y=avg,col=Isolation),size=1)+
theme_classic()+ylab("Variation in offspring per parent")+xlab("Generation")+facet_grid(.~grouping)+geom_hline(yintercept=2,linetype='dashed')
Parent.filtered = filter(Parent.joint,Gen %in% c(1,50,150,500))#,grouping=="Selfing")
ggplot(data=filter(Parent.joint,Gen %in% c(1,50,150,500),grouping=="Selfing"),aes(Offspring,fill=Isolation))+geom_histogram(binwidth=0.5)+facet_grid(Gen~Isolation,labeller=labeller(Gen=c(`1`='Gen 1',`50`='Gen 50',`150`='Gen 150',`500`='Gen 500')))+theme_classic()+xlab("Number gametes to next generation per parent")+ylab('Count')
Mantel.obs = as.data.frame(matrix(nrow=length(g.list),ncol=8))
names(Mantel.obs) = sapply(1:8, function(X) paste('paraset',X,sep="_"))
##############################################################
## Calculate spatial autocorrelation statistics
##############################################################
for (r in r.list){
for (s in 9:16){
for (g in 1:length(g.list)){
gen = g.list[g]
df = read.csv(paste(getwd(),'/para_set_',s,'/model_run_',r,'/paraset_',s,'_offspring_map_',gen,'.csv',sep=""))
neutral.df = df %>% select(.,FLday,X_pos,Y_pos,mapA,mapB,mapC,neut1a:neut24b)
neutral.df[] = lapply(neutral.df, as.character)
neutral.df[neutral.df == 'D'] = 1;
neutral.df[neutral.df[,] == 'd'] = 0
neutral.df[] = lapply(neutral.df, as.numeric)
neutral.df = neutral.df %>%
mutate(.,map1 = neut1a+neut1b) %>%
mutate(.,map2 = neut2a+neut2b) %>%
mutate(.,map3 = neut3a+neut3b) %>%
mutate(.,map4 = neut4a+neut4b) %>%
mutate(.,map5 = neut5a+neut5b) %>%
mutate(.,map6 = neut6a+neut6b) %>%
mutate(.,map7 = neut7a+neut7b) %>%
mutate(.,map8 = neut8a+neut8b) %>%
mutate(.,map9 = neut9a+neut9b) %>%
mutate(.,map10 = neut10a+neut10b) %>%
mutate(.,map11 = neut11a+neut11b) %>%
mutate(.,map12 = neut12a+neut12b) %>%
mutate(.,map13 = neut13a+neut13b) %>%
mutate(.,map14 = neut14a+neut14b) %>%
mutate(.,map15 = neut15a+neut15b) %>%
mutate(.,map16 = neut16a+neut16b) %>%
mutate(.,map17 = neut17a+neut17b) %>%
mutate(.,map18 = neut18a+neut18b) %>%
mutate(.,map19 = neut19a+neut19b) %>%
mutate(.,map20 = neut20a+neut20b) %>%
mutate(.,map21 = neut21a+neut21b) %>%
mutate(.,map22 = neut22a+neut22b) %>%
mutate(.,map23 = neut23a+neut23b) %>%
mutate(.,map24 = neut24a+neut24b)
ind.neutral.df = neutral.df %>% select(.,FLday,X_pos,Y_pos,mapA:mapC,map1:map24)
neutral.df = neutral.df %>% select(.,mapA:mapC,map1:map24)
neutral.freq = colSums(neutral.df)/(2*nrow(neutral.df))
if (g == 1){
map.df = as.data.frame(neutral.freq) %>% rownames_to_column()
map.df$Generation = gen
names(map.df) = c('Locus','Frequency','Generation')
} else {
temp.df = as.data.frame(neutral.freq) %>% rownames_to_column()
temp.df$Generation = gen
names(temp.df) = c('Locus','Frequency','Generation')
map.df = bind_rows(map.df,temp.df)
}
}
if (s == 9){
var.final = map.df
var.final$paraset = s
} else {
var.temp = map.df
var.temp$paraset = s
var.final = bind_rows(var.final,var.temp)
}
}
var.final$grouping[1:(nrow(var.final)/2)] = 'Selfing'
var.final$grouping[(1+nrow(var.final)/2):nrow(var.final)] = 'No selfing'
var.final$paraset[(var.final$paraset == 9)|(var.final$paraset == 13)] = 'Null'
var.final$paraset[(var.final$paraset == 10)|(var.final$paraset == 14)] = 'IBT'
var.final$paraset[(var.final$paraset == 11)|(var.final$paraset == 15)] = 'IBD'
var.final$paraset[(var.final$paraset == 12)|(var.final$paraset == 16)] = 'IBDxIBT'
names(var.final)[4] = 'Isolation'
summary.df = var.final %>% group_by(.,Generation,grouping,Isolation) %>% summarise(var=var(Frequency))
summary.df$Run = r
if (r == 1){joint.summary = summary.df} else {joint.summary = bind_rows(joint.summary,summary.df)}
}
Var.avg = joint.summary %>% group_by(grouping,Isolation,Generation) %>% summarise(.,avg=mean(var))
ggplot()+geom_line(data=filter(joint.summary,Run==1),aes(x=Generation,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(joint.summary,Run==2),aes(x=Generation,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(joint.summary,Run==3),aes(x=Generation,y=var,col=Isolation),alpha=0.25)+
geom_line(data=filter(joint.summary,Run==4),aes(x=Generation,y=var,col=Isolation),alpha=0.25)+
geom_line(data=Var.avg,aes(x=Generation,y=avg,col=Isolation),size=1)+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
ggplot()+geom_line(data=filter(joint.summary,Run==3,grouping=='Selfing'),aes(x=Generation,y=var,col=Isolation))+
theme_classic()+ylab('Variance')+facet_grid(.~grouping)+ggtitle('Variance in allele frequency at neutral loci')
run = 4 #model run
##########################################
## Sorting allele frequencies by cluster
##########################################
para_set = 12 #parameter set
g.list = c(1,10,20,30,40,50,60,70,80,90,100,150,200, 250,300,350,400,450,500)
for (g in g.list){
df = read.csv(paste(getwd(),'/para_set_',para_set,'/model_run_',run,'/paraset_',para_set,'_offspring_map_',g,'.csv',sep=""))
neutral.df = df %>% select(.,FLday,X_pos,Y_pos,mapA,mapB,mapC,neut1a:neut24b)
neutral.df[] = lapply(neutral.df, as.character)
neutral.df[neutral.df == 'D'] = 1;
neutral.df[neutral.df[,] == 'd'] = 0
neutral.df[] = lapply(neutral.df, as.numeric)
neutral.df = neutral.df %>%
mutate(.,map1 = neut1a+neut1b) %>%
mutate(.,map2 = neut2a+neut2b) %>%
mutate(.,map3 = neut3a+neut3b) %>%
mutate(.,map4 = neut4a+neut4b) %>%
mutate(.,map5 = neut5a+neut5b) %>%
mutate(.,map6 = neut6a+neut6b) %>%
mutate(.,map7 = neut7a+neut7b) %>%
mutate(.,map8 = neut8a+neut8b) %>%
mutate(.,map9 = neut9a+neut9b) %>%
mutate(.,map10 = neut10a+neut10b) %>%
mutate(.,map11 = neut11a+neut11b) %>%
mutate(.,map12 = neut12a+neut12b) %>%
mutate(.,map13 = neut13a+neut13b) %>%
mutate(.,map14 = neut14a+neut14b) %>%
mutate(.,map15 = neut15a+neut15b) %>%
mutate(.,map16 = neut16a+neut16b) %>%
mutate(.,map17 = neut17a+neut17b) %>%
mutate(.,map18 = neut18a+neut18b) %>%
mutate(.,map19 = neut19a+neut19b) %>%
mutate(.,map20 = neut20a+neut20b) %>%
mutate(.,map21 = neut21a+neut21b) %>%
mutate(.,map22 = neut22a+neut22b) %>%
mutate(.,map23 = neut23a+neut23b) %>%
mutate(.,map24 = neut24a+neut24b)
ind.neutral.df = neutral.df %>% select(.,FLday,X_pos,Y_pos,mapA:mapC,map1:map24)
neutral.df = neutral.df %>% select(.,mapA:mapC,map1:map24)
df.scaled = scale(neutral.df)
scaled.matrix = as.matrix(df.scaled)
k.means = 2
km.res = kmeans(df.scaled, k.means, iter.max = 20,nstart = 25)
neutral.df$cluster = km.res$cluster
neutral.freq = colSums(neutral.df)/(2*nrow(neutral.df))
neutral.1 = filter(neutral.df,cluster==1)
neutral.1.freq = colSums(neutral.1)/(2*nrow(neutral.1))
neutral.2 = filter(neutral.df,cluster==2)
neutral.2.freq = colSums(neutral.2)/(2*nrow(neutral.2))
if (g == 1){
map.df = as.data.frame(neutral.freq) %>% rownames_to_column()
map1 = as.data.frame(neutral.1.freq) %>% rownames_to_column() %>% filter(.,rowname!='cluster')
map2 = as.data.frame(neutral.2.freq) %>% rownames_to_column() %>% filter(.,rowname!='cluster')
map.df = right_join(map.df,map1,'rowname') %>% right_join(.,map2,'rowname')
map.df$Generation = g
names(map.df) = c('Locus','Frequency','k1Freq','k2Freq','Generation')
} else {
temp.df = as.data.frame(neutral.freq) %>% rownames_to_column()
temp1 = as.data.frame(neutral.1.freq) %>% rownames_to_column() %>% filter(.,rowname!='cluster')
temp2 = as.data.frame(neutral.2.freq) %>% rownames_to_column() %>% filter(.,rowname!='cluster')
temp.df = right_join(temp.df,temp1,'rowname') %>% right_join(.,temp2,'rowname')
temp.df$Generation = g
names(temp.df) = c('Locus','Frequency','k1Freq','k2Freq','Generation')
map.df = bind_rows(map.df,temp.df)
}
}
ggplot()+#geom_line(data=map.df,aes(x=Generation,y=Frequency,col=Locus))+
geom_line(data=map.df,aes(x=Generation,y=k1Freq,col=Locus),alpha=1)+
geom_line(data=map.df,aes(x=Generation,y=k2Freq,col=Locus),alpha=1)+
theme_bw()+ylim(0,1)+theme(legend.position="none")
avg.diff = map.df %>% filter(.,Generation>100) %>% group_by(Generation) %>% summarise(.,avg = mean(abs(k1Freq-k2Freq)))
ggplot()+geom_line(data=filter(map.df,Generation>100),aes(x=Generation,y=abs(k1Freq-k2Freq),col=Locus))+theme_bw()+ylim(0,1)+theme(legend.position="none")+ylab('Difference in neutral allele frequency between clusters')
avg.diff = map.df %>% filter(.,Generation>100) %>% group_by(Generation) %>% summarise(.,avg = mean(abs(k1Freq-k2Freq)))
avg.diff$Isolation = 'IBDxIBT'
avg.joint = avg.diff
avg.joint = bind_rows(avg.joint,avg.diff)
ggplot()+geom_line(data=avg.joint,aes(x=Generation,y=avg,col=Isolation))+theme_bw()+ylim(0,0.2)+ylab('Difference in neutral freq. between clusters (k forced to 2)')
